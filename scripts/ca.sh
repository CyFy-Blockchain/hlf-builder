#!/bin/bash
# ORG_NAME=org1

# ORG_ADMIN_NAME=admin
# ORG_ADMIN_PASSWORD=adminpw

# ORG_CA_PORT=7054
# ORG_CA_URL=localhost
function createOrganisation() {
  ORG_NAME=$1

  ORG_ADMIN_NAME=$2
  ORG_ADMIN_PASSWORD=$3

  ORG_CA_PORT=$4
  ORG_CA_URL=$5

  infoln "Enrolling the CA admin"
  mkdir -p organizations/peerOrganizations/$ORG_NAME.ums.com/

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/

  set -x
  fabric-ca-client enroll -u https://$ORG_ADMIN_NAME:$ORG_ADMIN_PASSWORD@$ORG_CA_URL:$ORG_CA_PORT --tls.certfiles "${PWD}/organizations/fabric-ca/$ORG_NAME/ca-cert.pem"
  { set +x; } 2>/dev/null

  # Study NodeUSs
  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/'$ORG_CA_URL'-'$ORG_CA_PORT'-ca-'$ORG_NAME'.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/'$ORG_CA_URL'-'$ORG_CA_PORT'-ca-'$ORG_NAME'.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/'$ORG_CA_URL'-'$ORG_CA_PORT'-ca-'$ORG_NAME'.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/'$ORG_CA_URL'-'$ORG_CA_PORT'-ca-'$ORG_NAME'.pem
    OrganizationalUnitIdentifier: orderer' >"${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/msp/config.yaml"

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy org1's CA cert to org1's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/$ORG_NAME/ca-cert.pem" "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/msp/tlscacerts/ca.crt"

  # Copy org1's CA cert to org1's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/tlsca"
  cp "${PWD}/organizations/fabric-ca/$ORG_NAME/ca-cert.pem" "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/tlsca/tlsca.$ORG_NAME.ums.com-cert.pem"

  # Copy org1's CA cert to org1's /ca directory (for use by clients)
  mkdir -p "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/ca"
  cp "${PWD}/organizations/fabric-ca/$ORG_NAME/ca-cert.pem" "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/ca/ca.$ORG_NAME.ums.com-cert.pem"

  registerEntity $ORG_NAME peer0 peer0pw peer

  registerEntity $ORG_NAME user1 user1pw client

  registerEntity $ORG_NAME org1admin org1adminpw admin

  generatePeerMSP $ORG_CA_URL $ORG_CA_PORT $ORG_NAME peer0 peer0pw

  generateUserMSP $ORG_CA_URL $ORG_CA_PORT $ORG_NAME user1 user1pw user

  generateUserMSP $ORG_CA_URL $ORG_CA_PORT $ORG_NAME org1admin org1adminpw admin
}

function registerEntity() {
  ORG_NAME=$1
  USERNAME=$2
  PASS=$3
  ENTITY_TYPE=$4

  infoln "Registering $ENTITY_TYPE for $ORG_NAME"
  set -x
  fabric-ca-client register --id.name $USERNAME --id.secret $PASS --id.type $ENTITY_TYPE --tls.certfiles "${PWD}/organizations/fabric-ca/$ORG_NAME/ca-cert.pem"
  { set +x; } 2>/dev/null
}

function generatePeerMSP() {
  ORG_CA_URL=$1
  ORG_CA_PORT=$2
  ORG_NAME=$3

  USERNAME=$4
  PASS=$5

  infoln "Generating the peer msp for $ORG_NAME"
  set -x
  # -M and --mspdir both can be used to specify the MSP directory path
  fabric-ca-client enroll -u https://$USERNAME:$PASS@$ORG_CA_URL:$ORG_CA_PORT -M "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/$ORG_NAME/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/msp/config.yaml"

  infoln "Generating the $USERNAME-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://$USERNAME:$PASS@$ORG_CA_URL:$ORG_CA_PORT -M "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/tls" --enrollment.profile tls --csr.hosts $USERNAME.$ORG_NAME.ums.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/$ORG_NAME/ca-cert.pem"
  { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
  cp "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/tls/ca.crt"
  cp "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/tls/server.crt"
  cp "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/tls/keystore/"* "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/peers/$USERNAME.$ORG_NAME.ums.com/tls/server.key"
}

function generateUserMSP() {
  ORG_CA_URL=$1
  ORG_CA_PORT=$2
  ORG_NAME=$3

  USERNAME=$4
  PASS=$5

  ENTITY_TYPE=$6

  MSP_PATH_DIR="${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/users/$USERNAME@$ORG_NAME.ums.com/msp"

  if [ "${ENTITY_TYPE}" == "admin" ]; then
    MSP_PATH_DIR="${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/users/Admin@$ORG_NAME.ums.com/msp"
  fi

  infoln "Generating the user msp for $ORG_NAME"
  set -x
  fabric-ca-client enroll -u https://$USERNAME:$PASS@$ORG_CA_URL:$ORG_CA_PORT -M "$MSP_PATH_DIR" --tls.certfiles "${PWD}/organizations/fabric-ca/$ORG_NAME/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/peerOrganizations/$ORG_NAME.ums.com/msp/config.yaml" "$MSP_PATH_DIR/config.yaml"
}
